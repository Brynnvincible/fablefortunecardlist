@model FableFortuneCardList.Models.DeckViewModels.EditDeckViewModel
@using FableFortuneCardList.Enums
@{
    ViewData["Title"] = "Edit";
}

<h2>Edit</h2>
<div class="col-md-10">
    <div class="panel">
        <div class="panel-body">
            <div class="col-md-6">
                <form asp-action="Edit">
                    <div class="form-horizontal">
                        <h4>Deck</h4>
                        <hr />
                        @{ // you can put the following in a back-end method and pass through ViewBag
                            var selectList = Enum.GetValues(typeof(ClassType))
                                                 .Cast<ClassType>()
                                                 .Where(e => e != ClassType.Neutral)
                                                 .Select(e => new SelectListItem
                                                 {
                                                     Value = ((int)e).ToString(),
                                                     Text = e.ToString()
                                                 });
                        }
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <input type="hidden" asp-for="ID" />
                        <div class="form-group">
                            <label asp-for="Name" class="col-md-2 control-label"></label>
                            <div class="col-md-10">
                                <input asp-for="Name" class="form-control" />
                                <span asp-validation-for="Name" class="text-danger" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label asp-for="Description" class="col-md-2 control-label"></label>
                            <div class="col-md-10">
                                <textarea asp-for="Description" class="form-control" ></textarea>
                                <span asp-validation-for="Description" class="text-danger" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label asp-for="Class" class="col-md-2 control-label"></label>
                            <div class="col-md-10">
                                @Html.DropDownListFor(x=>x.Class, selectList, null, new { @class="form-control"})
                                <span asp-validation-for="Class" class="text-danger" />
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Save" class="btn btn-default" />
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="col-md-6">
                <div id="DeckSummary">
                    @{Html.RenderPartial("DeckGoldSummary", Model.Deck);}
                </div>
            </div>
            <div class="col-md-12">
                    <hr />
                    <div id="AvailableCardsTable">
                        @{Html.RenderPartial("DeckAvailableCards", Model);}
                    </div>
                    <div>
                        <a asp-action="Index">Back to List</a>
                    </div>
                </div>

            </div>

    </div>
</div>
<div class="col-md-2">
    <div id="DeckCardSummary">
        @{Html.RenderPartial("DeckCardSummary", Model.Deck);}
    </div>     
</div>
<div class="clearfix"></div>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        function disableAllButtons(){
            $(".addCardBtn").each(function (index, button) {
                $(button).prop("disabled", true).button();
            });
        }

        function disableAllTrophyButtons(){
            $(".addCardBtn.Trophy").each(function (index, button) {
                $(button).prop("disabled", true).button();
            });
        }

        function reloadDeckGoldSummary(){
            $.ajax({
                url: "/Deck/GoldSummary/@Model.ID",
                success: function(html){
                    $("#DeckSummary").html(html);
                }
            });
        }

        function bindAddButtons(){

            var addCardButtons = $(".addCardBtn");

            $.each(addCardButtons, function(index, addCardButton){
                bindAddButton($(addCardButton));
            });

            $(".addCardBtn").button();
        }

        function bindSummaryTooltips(){
            $(document).tooltip({
                items: ".deckCard",
                track: true,
                tooltipClass: "cardTemplateTooltip",
                content: function () {
                    var element = $(this).find(".cardTemplateTooltip");

                    return element.html();
                }
            });        
        }

        function bindTableTooltips(){
           
            $(document).tooltip({
                items: "#AvailableCards tbody tr td a",
                track: true,
                tooltipClass: "cardTemplateTooltip",
                content: function () {
                    var element = $(this).parent().parent().find(".cardTemplateTooltip");

                    return element.html();
                }
            });        
        }

        function loadAvailableCards(){
            $.ajax({
                url: "/Deck/AvailableCards/@Model.ID",
                success: function(html){
                    $("#AvailableCardsTable").html(html);
                    bindAddButtons();
                    bindAvailableCardsTable();


                }
            });
        }

        function bindAvailableCardsTable(){

            var table = $("#AvailableCards").DataTable({
                "colReorder": true,
                "lengthMenu": [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
                "iDisplayLength": 10,
                "stateSave": true
            });

            $("#AvailableCardsTable").ploading({action:'hide'});
        }

        function bindAddButton(addCardButtonObject){
            addCardButtonObject.click(function (event) {
                var addButton = $(this);
                var deckId = @Model.ID;
                var cardId = addButton.parent().find("input[name='cardId']").val();

                var data = { "deckId" : deckId, "cardId" : cardId };

                $("#AvailableCardsTable").ploading({action:'show'});

                $.ajax({
                    type: "POST",
                    url: "/Deck/AddCard",
                    data: data,
                    success: function (html) {
                        $("#DeckCardSummary").html(html);
                        bindSummaryTooltips();
                        bindRemoveButtons();                        
                        reloadDeckGoldSummary();
                        loadAvailableCards();
                    }
                });

                event.preventDefault();
            });
        }

        function bindRemoveButtons(){
            $(".removeCardBtn").click(function (event) {
                var removeButton = $(this);
                var deckCardId = removeButton.parent().find("input[name='deckCardId']").val();
                
                $("#AvailableCardsTable").ploading({action:'show'});
                var data = {'deckCardId':deckCardId}
                $.ajax({
                    type: "POST",
                    url: "/Deck/RemoveCard",
                    data: data,
                    success: function (html) {
                        $("#DeckCardSummary").html(html);
                        bindSummaryTooltips();
                        bindRemoveButtons();

                        loadAvailableCards();
                    }
                });

                event.preventDefault();
            });
        }

        $(document).ready(function () {
            bindAddButtons();
            bindRemoveButtons();
            bindAvailableCardsTable();
            bindTableTooltips();
            bindSummaryTooltips();
            var filterLinks = $(".filterList a");
            var filteredData = filterLinks.click(function () {
                var filterValue = $(this).html();
                if (filterValue == "Clear")
                    table.search("").draw();
                else {
                    var currentSearch = table.search();
                    if (!currentSearch.includes(filterValue))
                        table.search(currentSearch + " " + filterValue).draw();
                }
            });
        });
    </script>
}
