@model FableFortuneCardList.Models.Card
@using System.IO;
@using FableFortuneCardList.Shared;

@if (!string.IsNullOrEmpty(Model.ImageUrl))
{
<div class="cardImage">
    <img src="~/images/cards/@System.IO.Path.GetFileName(Model.ImageUrl)?1001" class="cardImage" />
</div>
}else{
<div class="cardTemplate ui-widget-header">
    <div class="cardWrapper @Model.TransformType">
        @if (Model.Transform == null || Model.Transform == string.Empty)
        {
            <span class="GoldCount">@Model.Gold</span>
        }
        <div class="CardName">
            @if (Model.Transform != null && Model.Transform != string.Empty)
            {
                <span class="TransformName">@Model.Transform</span>
            }
            <span class="CardName">@Model.Name</span>
        </div>
        <span class="StrengthCount">@Model.Strength</span>
        <span class="HealthCount">@Model.Health</span>
        <span class="AbilityText">
            @if (Model.Ability != null && Model.Ability.Contains(":"))
            {
                <strong>@Model.Ability.Split(':')[0]:</strong>
                @Model.Ability.Split(':')[1]
            }
            else
            {
                <text>@Model.Ability</text>
            }
        </span>
        <span class="RarityType @Model.Rarity"></span>
    </div>
</div>
}
@if (Model.Transforms.Count > 0)
{
    @foreach (var transformCard in Model.Transforms)
    {
        Html.RenderPartial("CardView", transformCard);
    }
}
@if (Model.Evolves > 0)
{
    for (int x = 1; x <= Model.Evolves; x++)
    {
        Card evolve = Model.Clone();
        evolve.ImageUrl = ValidateCardImageURL.GetCardEvolutionName(Model.Name, x);
        evolve.Evolves = 0;
        Html.RenderPartial("CardView", evolve);
    }
}
